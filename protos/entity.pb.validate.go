// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/entity.proto

package entity

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _entity_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Entity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Entity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Url

	return nil
}

// EntityValidationError is the validation error returned by Entity.Validate if
// the designated constraints aren't met.
type EntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityValidationError) ErrorName() string { return "EntityValidationError" }

// Error satisfies the builtin error interface
func (e EntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityValidationError{}

// Validate checks the field values on CreateEntityBody with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateEntityBody) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 125 {
		return CreateEntityBodyValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 125 runes, inclusive",
		}
	}

	// no validation rules for Description

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		return CreateEntityBodyValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// CreateEntityBodyValidationError is the validation error returned by
// CreateEntityBody.Validate if the designated constraints aren't met.
type CreateEntityBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntityBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntityBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntityBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntityBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntityBodyValidationError) ErrorName() string { return "CreateEntityBodyValidationError" }

// Error satisfies the builtin error interface
func (e CreateEntityBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntityBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntityBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntityBodyValidationError{}

// Validate checks the field values on UpdateEntityBody with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateEntityBody) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return UpdateEntityBodyValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Url

	return nil
}

// UpdateEntityBodyValidationError is the validation error returned by
// UpdateEntityBody.Validate if the designated constraints aren't met.
type UpdateEntityBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEntityBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEntityBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEntityBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEntityBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEntityBodyValidationError) ErrorName() string { return "UpdateEntityBodyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateEntityBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEntityBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEntityBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEntityBodyValidationError{}

// Validate checks the field values on CreateEntityReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateEntityReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEntityReqValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateEntityReqValidationError is the validation error returned by
// CreateEntityReq.Validate if the designated constraints aren't met.
type CreateEntityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntityReqValidationError) ErrorName() string { return "CreateEntityReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateEntityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntityReqValidationError{}

// Validate checks the field values on CreateEntityRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateEntityRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEntityResValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateEntityResValidationError is the validation error returned by
// CreateEntityRes.Validate if the designated constraints aren't met.
type CreateEntityResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntityResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntityResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntityResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntityResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntityResValidationError) ErrorName() string { return "CreateEntityResValidationError" }

// Error satisfies the builtin error interface
func (e CreateEntityResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntityRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntityResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntityResValidationError{}

// Validate checks the field values on UpdateEntityReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateEntityReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEntityReqValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateEntityReqValidationError is the validation error returned by
// UpdateEntityReq.Validate if the designated constraints aren't met.
type UpdateEntityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEntityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEntityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEntityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEntityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEntityReqValidationError) ErrorName() string { return "UpdateEntityReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateEntityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEntityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEntityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEntityReqValidationError{}

// Validate checks the field values on UpdateEntityRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateEntityRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEntityResValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateEntityResValidationError is the validation error returned by
// UpdateEntityRes.Validate if the designated constraints aren't met.
type UpdateEntityResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEntityResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEntityResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEntityResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEntityResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEntityResValidationError) ErrorName() string { return "UpdateEntityResValidationError" }

// Error satisfies the builtin error interface
func (e UpdateEntityResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEntityRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEntityResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEntityResValidationError{}

// Validate checks the field values on ReadEntityReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ReadEntityReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return ReadEntityReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ReadEntityReqValidationError is the validation error returned by
// ReadEntityReq.Validate if the designated constraints aren't met.
type ReadEntityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadEntityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadEntityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadEntityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadEntityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadEntityReqValidationError) ErrorName() string { return "ReadEntityReqValidationError" }

// Error satisfies the builtin error interface
func (e ReadEntityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadEntityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadEntityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadEntityReqValidationError{}

// Validate checks the field values on ReadEntityRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ReadEntityRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadEntityResValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadEntityResValidationError is the validation error returned by
// ReadEntityRes.Validate if the designated constraints aren't met.
type ReadEntityResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadEntityResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadEntityResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadEntityResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadEntityResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadEntityResValidationError) ErrorName() string { return "ReadEntityResValidationError" }

// Error satisfies the builtin error interface
func (e ReadEntityResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadEntityRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadEntityResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadEntityResValidationError{}

// Validate checks the field values on DeleteEntityReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteEntityReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteEntityReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteEntityReqValidationError is the validation error returned by
// DeleteEntityReq.Validate if the designated constraints aren't met.
type DeleteEntityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEntityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEntityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEntityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEntityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEntityReqValidationError) ErrorName() string { return "DeleteEntityReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteEntityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEntityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEntityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEntityReqValidationError{}

// Validate checks the field values on DeleteEntityRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteEntityRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteEntityResValidationError is the validation error returned by
// DeleteEntityRes.Validate if the designated constraints aren't met.
type DeleteEntityResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEntityResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEntityResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEntityResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEntityResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEntityResValidationError) ErrorName() string { return "DeleteEntityResValidationError" }

// Error satisfies the builtin error interface
func (e DeleteEntityResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEntityRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEntityResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEntityResValidationError{}

// Validate checks the field values on ListEntitiesReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListEntitiesReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListEntitiesReqValidationError is the validation error returned by
// ListEntitiesReq.Validate if the designated constraints aren't met.
type ListEntitiesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntitiesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntitiesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntitiesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntitiesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntitiesReqValidationError) ErrorName() string { return "ListEntitiesReqValidationError" }

// Error satisfies the builtin error interface
func (e ListEntitiesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntitiesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntitiesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntitiesReqValidationError{}

// Validate checks the field values on ListEntitiesRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListEntitiesRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEntity() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEntitiesResValidationError{
					field:  fmt.Sprintf("Entity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEntitiesResValidationError is the validation error returned by
// ListEntitiesRes.Validate if the designated constraints aren't met.
type ListEntitiesResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntitiesResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntitiesResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntitiesResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntitiesResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntitiesResValidationError) ErrorName() string { return "ListEntitiesResValidationError" }

// Error satisfies the builtin error interface
func (e ListEntitiesResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntitiesRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntitiesResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntitiesResValidationError{}
