syntax = "proto3";
package entity;

import "google/api/annotations.proto";
import "validate/validate.proto";

// The entity service definition with http transcoding
service EntityService {
  rpc CreateEntity(CreateEntityReq) returns (CreateEntityRes) {
    // Define HTTP mapping.
    option (google.api.http) = {
      post: "/entities"
      body: "entity"
    };
  }
  rpc ReadEntity(ReadEntityReq) returns (ReadEntityRes) {
    option (google.api.http) = { 
      get: "/entities/{id}" 
    };
  }
  rpc UpdateEntity(UpdateEntityReq) returns (UpdateEntityRes) {
    option (google.api.http) = {
      put: "/entities"
      body: "entity"
    };
  }
  rpc DeleteEntity(DeleteEntityReq) returns (DeleteEntityRes) {
    option (google.api.http) = { 
      delete: "/entities/{id}" 
    };
  }
  rpc ListEntities(ListEntitiesReq) returns (stream ListEntitiesRes) {
    option (google.api.http) = {
      get: "/entities"
    };
  }
}

// Entity message type for responding
message Entity {
  string id = 1 ;
  string name = 2;
  string description = 3;
  string url = 4;
}

message CreateEntityBody {
  string name = 1 [(validate.rules).string = {min_len = 3; max_len = 125}];
  string description = 2;
  string url = 3 [(validate.rules).message.required = true];
}

message UpdateEntityBody {
  string id = 1[(validate.rules).string.uuid = true];
  string name = 2;
  string description = 3;
  string url = 4;
}

// Defintion of request and respone for each services
message CreateEntityReq {
  CreateEntityBody entity = 1;
}

message CreateEntityRes {
  Entity entity = 1;
}

message UpdateEntityReq {
  UpdateEntityBody entity = 1;
}

message UpdateEntityRes {
  Entity entity = 1;
}

message ReadEntityReq {
  string id = 1 [(validate.rules).string.uuid = true];
}

message ReadEntityRes {
  Entity entity = 1;
}

message DeleteEntityReq {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteEntityRes {
  bool success = 1;
}

message ListEntitiesReq {}

message ListEntitiesRes {
  repeated Entity entity = 1;
}

